import Head from 'next/head'
import Image from 'next/image'
import {useEffect,useState} from 'react'
//import useSWR from 'swr';
//import axios from 'axios';
import Toolbar from '../../global_to_local_dict_lib/toolbar'
import Autocomplete from '../../global_to_local_dict_lib/autocomplete'
import {url} from '../../global_to_local_dict_lib/rootUrl'
import { useSession } from "next-auth/react"
import { useRouter } from 'next/router'



export default function AddWord(argument) {
  const { data: session, status } = useSession() 
  const router = useRouter()
  const [filteredSuggestions, setFilteredSuggestions] = useState([]);
  const [dataFrom, setDataFrom] = useState([])
  const [dataTo, setDataTo] = useState([])
  const [inputFrom, setInputFrom] = useState("");
  const [inputTo, setInputTo] = useState("");
  const [word, setWord] = useState("");
  const [translate, setTranslate] = useState("");
  
  const [isLoading, setLoading] = useState(false)
  const urlSearchFrom=`${url}/language/?search=${inputFrom}`
  const urlSearchTo=`${url}/language/?search=${inputTo}`
  //http://localhost:8000/language/country/
  //const fetcher = (...args) => fetch(...args).then(res => res.json())
  //const { data, error } = useSWR(urlSearch, fetcher)

  
  useEffect(() => {
    setLoading(true)
    fetch(`${urlSearchFrom}`)
      .then((res) => res.json())
      .then((data) => {
        setDataFrom(data.results)
        setLoading(false)
      })
  }, [inputFrom])
  
  useEffect(() => {
    setLoading(true)
    fetch(`${urlSearchTo}`)
      .then((res) => res.json())
      .then((data) => {
        setDataTo(data.results)
        setLoading(false)
      })
  }, [inputTo])
  
  const submitData=(e)=>{
    e.preventDefault()
    const fromLanguageUrl=dataFrom.filter(u=>u.name==inputFrom)
    const toLanguageUrl=dataTo.filter(u=>u.name==inputTo)
    const dt = {
      word,
      word_audio:null,
      translate,
      translate_audio:null,
      added_by:(session ? session.user.url : null),
      from_language:(fromLanguageUrl.length > 0 ? fromLanguageUrl[0].url : null),
      to_language:(toLanguageUrl.length > 0 ? toLanguageUrl[0].url : null),
      machine:false
    }
    //alert(JSON.stringify(dt))
    const postData =  () => {
      //const rawResponse = await 
      fetch(`${url}/translate/create/word/`, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(dt)
      })
      .then(data=>router.push('/'))
      .catch(err=>alert(JSON.stringify(err)))
    }
    postData()
  }
  
  const handleChangeWord = (e) => setWord(e.target.value)
  const handleChangeTranslate = (e) => setTranslate(e.target.value)
  
  return(
  <div className="">
    <Head>
      <title>Create Next App</title>
      <meta charset="utf-8"/>
      <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
      <meta name="viewport" content="width=device-width, initial-scale=1"/>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <Toolbar/>
  <section class="h-100">
    <div class="container h-100">
      <div class="container row justify-content-md-center h-100">
        <div class="card-wrapper">
          <center>
            <div class="brand">
              <Image 
                src="/static/imgs/translate.png" alt="TRANSLATIONS"
                width={165}
                height={150}
                //layout="responsive"
                //objectFit="contain"
              />
            </div>
          </center>
          <div class="card fat">
            <div class="card-body img-thumbnail">
              <center>
              <h4 class="card-title">ADD TRANSLATIONS</h4>
              </center>
              <form onSubmit={submitData} method="POST" class="my-login-validation" novalidate="">
                <div class="img-thumbnail form-group container">
                  <label for="name">Word{` in ${inputFrom}`}</label>
                  <input onChange={handleChangeWord} value={word} id="name" type="text" class="form-control" name="word" required autofocus/>
                  <div class="invalid-feedback">
                    What's the word?
                  </div>
                  <label for="name">From Language</label>
                  <Autocomplete setInput={setInputFrom} input={inputFrom} suggestions={dataFrom.map(l=>l.name)}/>
                  <div class="invalid-feedback">
                    What's the language?
                  </div>
                </div>
                <br/>
                <div class="img-thumbnail form-group container">
                  <label for="name">Translated to{` ${inputTo}`}</label>
                  <input onChange={handleChangeTranslate} value={translate} id="name" type="text" class="form-control" name="translate" required autofocus/>
                  <div class="invalid-feedback">
                    What's the translate?
                  </div>
                  <label for="name">To Language</label>
                  <Autocomplete setInput={setInputTo} input={inputTo} suggestions={dataTo.map(l=>l.name)}/>
                  <div class="invalid-feedback">
                    What's the language?
                  </div>
                </div>
                
                
                
                <div class="form-group m-0">
                  <button type="submit" class="btn btn-primary btn-block">
                    ADD TRANSLATION
                  </button>
                </div>
                
              </form>
            </div>
          </div>
          
        </div>
      </div>
    </div>
  </section>
  </div>
    )
}